Decorators in Python are a powerful and flexible way to modify the behavior of functions or classes. They allow you to wrap another function in order to extend its behavior without explicitly modifying it. Decorators are commonly used for logging, access control, instrumentation, caching, and more.

### Basics of Decorators

A decorator is a function that takes another function as an argument, adds some kind of functionality, and returns a new function. This is done using the `@decorator_name` syntax above a function definition.

Here is a simple example:

```python
def my_decorator(func):
    def wrapper():
        print("Something is happening before the function is called.")
        func()
        print("Something is happening after the function is called.")
    return wrapper

@my_decorator
def say_hello():
    print("Hello!")

say_hello()
```

When `say_hello()` is called, the output will be:

```
Something is happening before the function is called.
Hello!
Something is happening after the function is called.
```

### Using Decorators with Arguments

If the function being decorated takes arguments, the wrapper function needs to accept and pass those arguments. This can be done using `*args` and `**kwargs` to handle any number of positional and keyword arguments.

```python
def my_decorator(func):
    def wrapper(*args, **kwargs):
        print("Before the function call")
        result = func(*args, **kwargs)
        print("After the function call")
        return result
    return wrapper

@my_decorator
def greet(name):
    print(f"Hello, {name}!")

greet("Alice")
```

### Multiple Decorators

You can apply multiple decorators to a single function by stacking them. They are applied from the top down.

```python
def decorator1(func):
    def wrapper(*args, **kwargs):
        print("Decorator 1")
        return func(*args, **kwargs)
    return wrapper

def decorator2(func):
    def wrapper(*args, **kwargs):
        print("Decorator 2")
        return func(*args, **kwargs)
    return wrapper

@decorator1
@decorator2
def say_hello():
    print("Hello!")

say_hello()
```

Output:

```
Decorator 1
Decorator 2
Hello!
```

### Class Decorators

Decorators can also be applied to classes. This is useful for modifying or enhancing the behavior of entire classes.

```python
def class_decorator(cls):
    class WrappedClass(cls):
        def new_method(self):
            print("This is a new method")
    return WrappedClass

@class_decorator
class MyClass:
    def __init__(self):
        self.name = "MyClass"

obj = MyClass()
obj.new_method()
```

### Built-in Decorators

Python provides some built-in decorators like `@staticmethod`, `@classmethod`, and `@property`.

- `@staticmethod`: Defines a static method that doesn't modify object state.
- `@classmethod`: Defines a class method that modifies the class state.
- `@property`: Used to define properties that can be accessed like attributes.

### Example with `@property`

```python
class MyClass:
    def __init__(self, value):
        self._value = value

    @property
    def value(self):
        return self._value

    @value.setter
    def value(self, new_value):
        if new_value >= 0:
            self._value = new_value

obj = MyClass(10)
print(obj.value)  # 10
obj.value = 20
print(obj.value)  # 20
```

Decorators are a versatile feature in Python, enabling clean and reusable modifications to function and class behavior.